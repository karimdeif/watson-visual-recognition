{"version":3,"sources":["icons/github.svg","icons/photo.svg","icons/failed.svg","icons/upload.svg","components/Loader.js","components/Dropzone.js","components/ViewContent.js","components/ViewHistory.js","components/HandwrtingRecognition.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","className","Dropzone","onDrop","files","length","file","data","FormData","append","props","callVisionApi","this","bind","accept","multiple","getRootProps","getInputProps","isDragActive","isDragReject","src","failed","alt","upload","photo","Component","ViewContent","state","result","setState","prevProps","Object","keys","mediaLink","description","ViewHistory","contents","map","content","index","key","API_URL","HandwritingRecognition","isFetching","view","setStateSync","Promise","resolve","goToHome","getHistoryData","a","axios","get","res","console","log","post","headers","type","onClick","App","target","href","github","HandwrtingRecognition","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1fbdcb1f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.860a4c62.svg\";","module.exports = __webpack_public_path__ + \"static/media/photo.2b0f570e.svg\";","module.exports = __webpack_public_path__ + \"static/media/failed.f16429a9.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload.82ff87d3.svg\";","import React from 'react'\n\nimport './Loader.css'\n\nexport default function () {\n    return (\n        <div className=\"dropzone-content\">\n            <div className=\"loading\">\n                <div className=\"finger finger-1\">\n                    <div className=\"finger-item\">\n                        <span></span><i></i>\n                    </div>\n                </div>\n                <div className=\"finger finger-2\">\n                    <div className=\"finger-item\">\n                        <span></span><i></i>\n                    </div>\n                </div>\n                <div className=\"finger finger-3\">\n                    <div className=\"finger-item\">\n                        <span></span><i></i>\n                    </div>\n                </div>\n                <div className=\"finger finger-4\">\n                    <div className=\"finger-item\">\n                        <span></span><i></i>\n                    </div>\n                </div>\n                <div className=\"last-finger\">\n                    <div className=\"last-finger-item\"><i></i></div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React, { Component } from 'react'\nimport ReactDropzone from 'react-dropzone';\n\nimport './Dropzone.css'\n\nimport photo from '../icons/photo.svg';\nimport failed from '../icons/failed.svg';\nimport upload from '../icons/upload.svg';\n\nclass Dropzone extends Component {\n\n    onDrop = (files) => {\n        if (files.length) {\n            let file = files[0]\n            let data = new FormData();\n            data.append('document', file);\n            this.props.callVisionApi(data)\n        }\n    }\n\n    render() {\n        return (\n            <ReactDropzone\n                onDrop={this.onDrop.bind(this)}\n                accept=\"image/*\"\n                multiple={false}\n            >\n                {({ getRootProps, getInputProps, isDragActive, isDragReject }) => (\n                    <div {...getRootProps()}>\n                        <input {...getInputProps()} />\n                        {\n                            isDragReject ?\n                                <div className=\"dropzone-content\">\n                                    <div>File type not accepted/<br />\n                                        Multiple files not allowed<br />\n                                        Please try again</div>\n                                    <img\n                                        src={failed} className=\"drop-logo\" alt=\"failed-logo\"\n                                    />\n                                </div>\n                                :\n                                !isDragActive ?\n                                    <div className=\"dropzone-content\">\n                                        <div>Drag image file here or<br />\n                                            Click inside the box to browse</div>\n                                        <img\n                                            src={photo} className=\"drop-logo\" alt=\"upload-logo\"\n                                        />\n                                    </div> :\n                                    <div className=\"dropzone-content\">\n                                        <div>Drop your file here</div>\n                                        <img\n                                            src={upload} className=\"drop-logo\" alt=\"uploading-logo\"\n                                        />\n                                    </div>\n\n                        }\n                    </div>\n                )}\n            </ReactDropzone>\n        )\n    }\n}\n\nexport default Dropzone","import React, { Fragment, Component } from 'react'\n\nimport './ViewContent.css'\n\nclass ViewContent extends Component {\n\n    state = {\n        result: {}\n    }\n\n    componentDidMount() {\n        const { result } = this.props\n\n        this.setState({\n            result,\n        })\n    }\n\n    componentDidUpdate(prevProps) {\n        const { result } = this.props\n\n        if (prevProps.result !== result) {\n            this.setState({\n                result\n            })\n        }\n    }\n\n    render() {\n        const { result } = this.state\n\n        return (\n            <Fragment>\n                {Object.keys(result).length ?\n                    <div className=\"result\">\n                        <div className=\"result-image\">\n                            <img\n                                src={result.mediaLink} className=\"media-image\" alt=\"media-logo\"\n                            />\n                        </div>\n                        <div className=\"result-description\">\n                            {result.description}\n                        </div>\n                    </div> :\n                    <div>Please add some images</div>\n                }\n            </Fragment>\n        )\n    }\n}\n\nexport default ViewContent","import React, { Component } from 'react'\n\nimport './ViewContent.css'\n\nclass ViewHistory extends Component {\n\n    state = {\n        contents: [],\n    }\n\n    componentDidMount() {\n        const { contents } = this.props\n\n        this.setState({\n            contents,\n        })\n    }\n\n    componentDidUpdate(prevProps) {\n        const { contents } = this.props\n\n        if (prevProps.contents !== contents) {\n            this.setState({\n                contents\n            })\n        }\n    }\n\n    render() {\n        const { contents } = this.state\n\n        return (\n            <div>\n                {contents.length ?\n                    contents.map((content, index) => {\n                        return (\n                            <div className=\"result\" key={index}>\n                                <div className=\"result-image\">\n                                    <img\n                                        src={content.mediaLink} className=\"media-image\" alt=\"media-logo\"\n                                    />\n                                </div>\n                                <div className=\"result-description\">\n                                    {content.description}\n                                </div>\n                            </div>\n                        )\n                    }) :\n                    <div>Please add some images</div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default ViewHistory","import React, { Component, Fragment } from 'react'\nimport axios from 'axios';\n\nimport Loader from './Loader'\nimport Dropzone from './Dropzone'\nimport ViewContent from './ViewContent'\nimport ViewHistory from './ViewHistory'\n\n// const API_URL = process.env.REACT_APP_BASE_URL\nconst API_URL = '/api/contents'\n\nclass HandwritingRecognition extends Component {\n\n    state = {\n        contents: [],\n        result: {},\n        isFetching: false,\n        view: ''\n    };\n\n    setStateSync = state => {\n        return new Promise(resolve => {\n            this.setState(state, resolve())\n        })\n    }\n\n    goToHome = () => {\n        this.setState({\n            view: ''\n        })\n    }\n\n    getHistoryData = async data => {\n        await this.setStateSync({ isFetching: true })\n        try {\n            const res = await axios.get(API_URL)\n            let contents = res.data.contents\n            await this.setStateSync({ isFetching: false, contents, view: 'ViewHistory' })\n        } catch (e) {\n            console.log(e)\n            await this.setStateSync({ isFetching: false, view: '' })\n        }\n    }\n\n    callVisionApi = async data => {\n        await this.setStateSync({ isFetching: true })\n        try {\n            const res = await axios.post(API_URL, data, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            })\n            let result = res.data.result\n            await this.setStateSync({ isFetching: false, result, view: 'ViewContent' })\n        } catch (e) {\n            console.log(e)\n            await this.setStateSync({ isFetching: false, view: '' })\n        }\n    }\n\n    render() {\n        const { isFetching, contents, result, view } = this.state\n        return (\n            <Fragment>\n                {\n                    isFetching ?\n                        null :\n                        <div>\n                            {view === 'ViewHistory' ?\n                                <button type=\"button\" onClick={this.goToHome}>Home</button> :\n                                <button type=\"button\" onClick={this.getHistoryData}>Display previous results</button>\n                            }\n                        </div>\n\n                }\n                <div className=\"dropzone\">\n                    {\n                        isFetching ? <Loader /> :\n                            view === 'ViewContent' ? <ViewContent result={result} /> :\n                                view === 'ViewHistory' ? <ViewHistory contents={contents} /> :\n                                    <Dropzone callVisionApi={this.callVisionApi} />\n                    }\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default HandwritingRecognition","import React, { Fragment } from 'react';\nimport './App.css';\n\nimport github from './icons/github.svg';\n\nimport HandwrtingRecognition from './components/HandwrtingRecognition'\n\nfunction App() {\n  return (\n    <Fragment>\n      <a target=\"_blank\" href=\"https://github.com/manvendra22/image-text-reader\" className=\"git-link\">\n        <img src={github} alt=\"github-logo\" className=\"icon-git\" />\n      </a>\n      <div className=\"container\">\n        <HandwrtingRecognition />\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}